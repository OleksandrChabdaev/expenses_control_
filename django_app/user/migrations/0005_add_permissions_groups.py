# Generated by Django 4.1.1 on 2022-10-27 06:30

from django.db import migrations


def add_permissions(apps, schema_editor):
    """
    Add permissions for Item and Expenses models.
    """
    permission = apps.get_model("auth", "Permission")
    content_type = apps.get_model("contenttypes", "ContentType")
    item_def = apps.get_model("item", "Item")
    expenses_def = apps.get_model("expenses", "Expenses")
    item_def_content_type = content_type.objects.get_for_model(item_def)
    expenses_def_content_type = content_type.objects.get_for_model(expenses_def)
    db_alias = schema_editor.connection.alias
    permissions_data = [
        {
            "codename": "add_item",
            "name": "Can add Item",
            "content_type": item_def_content_type,
        },
        {
            "codename": "change_item",
            "name": "Can change Item",
            "content_type": item_def_content_type,
        },
        {
            "codename": "delete_item",
            "name": "Can delete Item",
            "content_type": item_def_content_type,
        },
        {
            "codename": "view_item",
            "name": "Can view Item",
            "content_type": item_def_content_type,
        },
        {
            "codename": "add_expenses",
            "name": "Can add Expenses",
            "content_type": expenses_def_content_type,
        },
        {
            "codename": "change_expenses",
            "name": "Can change Expenses",
            "content_type": expenses_def_content_type,
        },
        {
            "codename": "delete_expenses",
            "name": "Can delete Expenses",
            "content_type": expenses_def_content_type,
        },
        {
            "codename": "view_expenses",
            "name": "Can view Expenses",
            "content_type": expenses_def_content_type,
        },
    ]

    permission_list = []
    for permission_data in permissions_data:
        if not permission.objects.filter(codename=permission_data["codename"]).exists():
            permission_list.append(
                permission(
                    codename=permission_data["codename"],
                    name=permission_data["name"],
                    content_type=permission_data["content_type"],
                )
            )
    permission.objects.using(db_alias).bulk_create(permission_list)


def add_groups(apps, schema_editor):
    """
    Add "Regulars", "Managers" groups.
    "Regulars" have next permissions:
    - Item - Can add/change/delete/view permission
    - Expenses - Can add/change/delete/view permission
    - User - Can change/view permission
    """
    group = apps.get_model("auth", "Group")
    permission = apps.get_model("auth", "Permission")
    db_alias = schema_editor.connection.alias
    permissions_code_names = [
        "add_item",
        "change_item",
        "delete_item",
        "view_item",
        "add_expenses",
        "change_expenses",
        "delete_expenses",
        "view_expenses",
        "change_user",
        "view_user",
    ]
    regulars_permissions = permission.objects.using(db_alias).filter(
        codename__in=permissions_code_names
    )
    regulars_group, created = group.objects.get_or_create(name="Regulars")
    regulars_group.permissions.set(regulars_permissions)


class Migration(migrations.Migration):
    dependencies = [
        ("user", "0004_user_day_sum"),
    ]
    operations = [
        migrations.RunPython(add_permissions),
        migrations.RunPython(add_groups),
    ]
